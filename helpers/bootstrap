#!/usr/bin/env bash

# Make sure these 2 values are set correctly or override them as parameters
readonly PROJECT_VERSION="0.0.9"
readonly PROJECT_ROOT=${HOME}/mcast

readonly DOWNLOAD_DIRECTORY=/tmp
readonly JDK_VERSION=17
readonly JDK_DOWNLOAD_URL_BASE="https://download.oracle.com/java/${JDK_VERSION}/latest"
readonly JDK_DOWNLOAD_FILE_X86_64=jdk-${JDK_VERSION}_linux-x64_bin.tar.gz
readonly JDK_DOWNLOAD_FILE_AARCH64=jdk-${JDK_VERSION}_linux-aarch64_bin.tar.gz
readonly JDK_DOWNLOAD_FILE=${DOWNLOAD_DIRECTORY}/jdk-${JDK_VERSION}.tar.gz

readonly PROJECT_DOWNLOAD_URL="https://art.aivax.link/artifactory/libs-release-local/link/aivax/learning/scala"

install_jdk() {
  local install_root_directory=${1}
  local jdk_install_directory=${install_root_directory}/jdks
  local jdk_home=${jdk_install_directory}/jdk-${JDK_VERSION}

  if [[ $(uname -m) == *aarch64* ]]; then
    local download_file=${JDK_DOWNLOAD_FILE_AARCH64}
  else
    local download_file=${JDK_DOWNLOAD_FILE_X86_64}
  fi

  local jdk_download_url="${JDK_DOWNLOAD_URL_BASE}/${download_file}"

  if [ -f $JDK_DOWNLOAD_FILE ]; then
     echo "File ${JDK_DOWNLOAD_FILE} exists."
  else
    echo "File ${JDK_DOWNLOAD_FILE} does not exist."
    echo "Downloading it from ${jdk_download_url}"
    wget -O ${JDK_DOWNLOAD_FILE} -q ${jdk_download_url}
  fi

  mkdir -p "${jdk_home}"
  tar -xf ${JDK_DOWNLOAD_FILE} --strip-components=1 --directory "${jdk_home}"

  ln -sf "${jdk_home}" "${jdk_install_directory}"/jdk-latest
}

install_app() {
  local app_name=${1}
  local app_version=${2}
  local install_root_directory=${3}

  local jdk_install_directory=${install_root_directory}/jdks

  local apps_home=${install_root_directory}/apps
  local apps_install_directory=${apps_home}/install
  local apps_config_directory=${apps_home}/conf

  # Install Project
  mkdir -p "${apps_install_directory}"

  rm -vf "${DOWNLOAD_DIRECTORY}/${app_name}.zip"
  wget -O "${DOWNLOAD_DIRECTORY}/${app_name}.zip" "${PROJECT_DOWNLOAD_URL}/${app_name}/${app_version}/${app_name}-${app_version}.zip"

  unzip -q -o -d "${apps_install_directory}" "${DOWNLOAD_DIRECTORY}/${app_name}.zip"

  # Setup Config
  mkdir -p "${apps_config_directory}"
  if [ -f "${apps_config_directory}/${app_name}.conf" ]; then
     echo "Config file ${apps_config_directory}/${app_name}.conf exists."
  else
    echo "Config file ${apps_config_directory}/${app_name}.conf does not exists."
    echo "Using the template at ${apps_install_directory}/${app_name}/conf/override.sample.conf"
    cp -v "${apps_install_directory}/${app_name}/conf/override.sample.conf" "${apps_config_directory}/${app_name}.conf"
  fi

  ln -sf "${apps_config_directory}/${app_name}.conf" "${apps_install_directory}/${app_name}/conf/override.conf"

  # Create run scripts
  touch "${apps_home}/${app_name}"
  chmod a+x "${apps_home}/${app_name}"

cat > "${apps_home}/${app_name}" <<EOF
#!/usr/bin/env bash

pushd ${apps_home}/install/${app_name}/bin
echo "I am in \$(pwd)"

( export JAVA_HOME=${jdk_install_directory}/jdk-latest; \\
  \$JAVA_HOME/bin/java --version \\
)

( export JAVA_HOME=${jdk_install_directory}/jdk-latest; \\
  export ALPHAVANTAGE_API_KEY=\${ALPHAVANTAGE_API_KEY}; \\
  export AWS_REGION=\${AWS_REGION}; \\
  export AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_ACCESS_KEY}; \\
  export AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY_ID}; \\
  export KMS_ENCRYPTION_KEY=\${KMS_ENCRYPTION_KEY}; \\
  export KMS_ENCRYPTION_ENABLED=\${KMS_ENCRYPTION_ENABLED}; \\
 ${apps_home}/install/${app_name}/bin/${app_name} \\
)

EOF
}

main() {
  local version="${1:-${PROJECT_VERSION}}"
  local install_root_directory="${2:-"${PROJECT_ROOT}"}"

  install_jdk "${install_root_directory}"

  install_app "multicast-publisher" "${version}" "${install_root_directory}"
  install_app "multicast-receiver" "${version}" "${install_root_directory}"
  install_app "multicast-snooper" "${version}" "${install_root_directory}"
}

main "$@"
